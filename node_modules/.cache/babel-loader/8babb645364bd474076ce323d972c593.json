{"ast":null,"code":"import { ethers } from 'ethers';\nimport TOKEN_ABI from '../abis/Token.json';\nexport const loadProvider = dispatch => {\n  const connection = new ethers.providers.Web3Provider(window.ethereum);\n  dispatch({\n    type: 'PROVIDER_LOADED',\n    connection\n  });\n  return connection;\n};\nexport const loadNetwork = async (provider, dispatch) => {\n  const {\n    chainId\n  } = await provider.getNetwork();\n  dispatch({\n    type: 'NETWORK_LOADED',\n    chainId\n  });\n  return chainId;\n};\nexport const loadAccount = async dispatch => {\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  const account = ethers.utils.getAddress(accounts[0]);\n  dispatch({\n    type: 'ACCOUNT_LOADED',\n    account\n  });\n  return account;\n};\nexport const loadToken = async (provider, addresses, dispatch) => {\n  let token, symbol;\n  token = new ethers.Contract(addresses[0], TOKEN_ABI, provider);\n  symbol = await token.symbol();\n  dispatch({\n    type: 'TOKEN_1_LOADED',\n    token,\n    symbol\n  });\n  token = new ethers.Contract(addresses[0], TOKEN_ABI, provider);\n  symbol = await token.symbol();\n  dispatch({\n    type: 'TOKEN_2_LOADED',\n    token,\n    symbol\n  });\n  return token;\n};","map":{"version":3,"sources":["/Users/sam4130/Documents/Blockchain/BLCP-ui-redux-setup/src/store/interactions.js"],"names":["ethers","TOKEN_ABI","loadProvider","dispatch","connection","providers","Web3Provider","window","ethereum","type","loadNetwork","provider","chainId","getNetwork","loadAccount","accounts","request","method","account","utils","getAddress","loadToken","addresses","token","symbol","Contract"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,OAAO,MAAMC,YAAY,GAAIC,QAAD,IAAc;AACxC,QAAMC,UAAU,GAAG,IAAIJ,MAAM,CAACK,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAnB;AACAL,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE,iBAAR;AAA2BL,IAAAA;AAA3B,GAAD,CAAR;AAEA,SAAOA,UAAP;AACD,CALM;AAOP,OAAO,MAAMM,WAAW,GAAG,OAAOC,QAAP,EAAiBR,QAAjB,KAA8B;AACvD,QAAM;AAAES,IAAAA;AAAF,MAAc,MAAMD,QAAQ,CAACE,UAAT,EAA1B;AACAV,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE,gBAAR;AAA0BG,IAAAA;AAA1B,GAAD,CAAR;AAEA,SAAOA,OAAP;AACD,CALM;AAOP,OAAO,MAAME,WAAW,GAAG,MAAOX,QAAP,IAAoB;AAC7C,QAAMY,QAAQ,GAAG,MAAMR,MAAM,CAACC,QAAP,CAAgBQ,OAAhB,CAAwB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAxB,CAAvB;AACA,QAAMC,OAAO,GAAGlB,MAAM,CAACmB,KAAP,CAAaC,UAAb,CAAwBL,QAAQ,CAAC,CAAD,CAAhC,CAAhB;AAEAZ,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE,gBAAR;AAA0BS,IAAAA;AAA1B,GAAD,CAAR;AAEA,SAAOA,OAAP;AACD,CAPM;AASP,OAAO,MAAMG,SAAS,GAAG,OAAOV,QAAP,EAAiBW,SAAjB,EAA4BnB,QAA5B,KAAyC;AAChE,MAAIoB,KAAJ,EAAWC,MAAX;AAEAD,EAAAA,KAAK,GAAG,IAAIvB,MAAM,CAACyB,QAAX,CAAoBH,SAAS,CAAC,CAAD,CAA7B,EAAkCrB,SAAlC,EAA6CU,QAA7C,CAAR;AACAa,EAAAA,MAAM,GAAG,MAAMD,KAAK,CAACC,MAAN,EAAf;AACArB,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE,gBAAR;AAA0Bc,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,GAAD,CAAR;AAEAD,EAAAA,KAAK,GAAG,IAAIvB,MAAM,CAACyB,QAAX,CAAoBH,SAAS,CAAC,CAAD,CAA7B,EAAkCrB,SAAlC,EAA6CU,QAA7C,CAAR;AACAa,EAAAA,MAAM,GAAG,MAAMD,KAAK,CAACC,MAAN,EAAf;AACArB,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE,gBAAR;AAA0Bc,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,GAAD,CAAR;AAEA,SAAOD,KAAP;AACD,CAZM","sourcesContent":["import { ethers } from 'ethers'\nimport TOKEN_ABI from '../abis/Token.json';\n\nexport const loadProvider = (dispatch) => {\n  const connection = new ethers.providers.Web3Provider(window.ethereum)\n  dispatch({ type: 'PROVIDER_LOADED', connection })\n\n  return connection\n}\n\nexport const loadNetwork = async (provider, dispatch) => {\n  const { chainId } = await provider.getNetwork()\n  dispatch({ type: 'NETWORK_LOADED', chainId })\n\n  return chainId\n}\n\nexport const loadAccount = async (dispatch) => {\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n  const account = ethers.utils.getAddress(accounts[0])\n\n  dispatch({ type: 'ACCOUNT_LOADED', account })\n\n  return account\n}\n\nexport const loadToken = async (provider, addresses, dispatch) => {\n  let token, symbol\n\n  token = new ethers.Contract(addresses[0], TOKEN_ABI, provider)\n  symbol = await token.symbol()\n  dispatch({ type: 'TOKEN_1_LOADED', token, symbol })\n  \n  token = new ethers.Contract(addresses[0], TOKEN_ABI, provider)\n  symbol = await token.symbol()\n  dispatch({ type: 'TOKEN_2_LOADED', token, symbol })\n\n  return token\n}\n"]},"metadata":{},"sourceType":"module"}